// Code generated by go-bindata.
// sources:
// data/status.html
// DO NOT EDIT!

package b2assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataStatusHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x53\x3f\x6f\xe3\x20\x14\xdf\xf3\x29\xde\x59\x1e\xa3\xa0\x64\x3c\xbd\xb0\xe4\x6e\xb8\xe1\xd4\xa8\xaa\x54\x75\xc4\x86\x1a\x4b\x18\x22\x8c\xd3\x46\x88\xef\x5e\x61\x6c\x93\xa8\x8d\xd4\xb5\x93\x9f\xe1\xf7\x17\x04\xfe\xfa\xf3\x70\x78\x7a\x39\xfe\x05\xe9\x3a\x45\x57\x38\x7f\x04\xe3\x74\x05\x80\xae\x75\x4a\xd0\x6a\x07\xb5\x6a\x85\x76\xd0\x3b\xe6\x86\x1e\x49\x5a\x5f\x21\x49\x48\xac\x0c\xbf\x8c\x04\xb9\xa5\xb5\x19\xb4\x83\xea\x02\xb5\xe1\x02\x89\xdc\x26\x25\x56\x45\x06\x40\x9c\xed\x3c\x48\xda\x09\x27\x0d\x47\xe2\x64\x5a\xf3\xde\x32\xdd\x08\x28\x23\x1b\x7e\xef\x81\x29\x75\x30\x5c\xf4\xb0\xf9\x3f\x42\xff\xe9\x57\x13\xc2\x88\x4d\x0a\xde\x8f\xd8\x10\xae\x45\x84\xe6\x13\x08\xc9\x6c\xb7\x48\x27\xcf\x49\x3c\xa9\xde\x93\x9f\xa8\xe9\x87\x47\xaf\x44\x1e\xdd\x78\xde\xbc\x1f\xbb\xfc\x4a\x38\xeb\x35\xc2\x1d\xc6\x03\xbb\xc6\x2d\x11\x73\xb3\x1b\xaf\xdc\xee\xb6\xdf\xe7\xd6\x48\x96\x83\x8f\x77\x33\x9c\x94\x61\xbc\x9f\x6f\xe5\x2a\xb7\x66\x9d\x58\x43\x79\x66\x2a\xa6\xdf\x3c\xdb\xd6\x09\xdb\xcf\x6a\x72\x47\xbd\x4f\x20\x88\x71\xe4\x6e\x8e\xb3\x08\xb4\x7c\x0d\xe5\xc9\x9a\x26\xf2\xa3\xce\xe6\x68\x4d\x63\x45\xdf\x2f\x51\xbd\x6f\x75\x1d\x91\x21\x00\x9e\xa6\x5d\x38\x33\x35\x88\x7d\xe1\xfd\xc8\x0e\xa1\x80\x8e\xbd\xef\x8b\x6d\x41\x91\xcc\x20\x8a\x95\x05\x92\x3d\x73\xd1\x3c\xc7\x7e\xdc\xbc\xe9\x6f\x36\x7c\x14\x8c\xff\xa8\x86\x48\xd2\x2b\x43\x92\x5e\xe9\x47\x00\x00\x00\xff\xff\x74\x31\x84\xe3\xbd\x03\x00\x00")

func dataStatusHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataStatusHtml,
		"data/status.html",
	)
}

func dataStatusHtml() (*asset, error) {
	bytes, err := dataStatusHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/status.html", size: 957, mode: os.FileMode(436), modTime: time.Unix(1520450073, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/status.html": dataStatusHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"status.html": &bintree{dataStatusHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

